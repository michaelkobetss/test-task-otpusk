//toursThunks.js

import { createAsyncThunk } from "@reduxjs/toolkit";
import {
    setActiveToken,
    setWaitUntil,
    clearWait,
    setInfo,
    decrementEmptyRetry,
    setHotelsCache,
} from "./toursSlice";

const sleep = (ms) => new Promise((r) => setTimeout(r, ms));


const waitUntilWithAbortCheck = async (ts, { dispatch, getState, requestId }) => {
    const now = Date.now();
    if (ts <= now) return;
    dispatch(setWaitUntil(ts));
    while (Date.now() < ts) {
        // —è–∫—â–æ –∑–∞–ø–∏—Ç –≤–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π ‚Äî –∫–∏–Ω–µ–º–æ ABORT
        if (getState().tours.currentRequestId !== requestId) {
            throw new Error("ABORTED");
        }
        // —á–µ–∫–∞—Ç–∏ –ø–æ 1—Å
        await sleep(1000);
    }
    // –∫–æ–ª–∏ —á–∞—Å –Ω–∞—Å—Ç–∞–≤ ‚Äî –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π wait
    dispatch(clearWait());
};

export const cancelActiveSearch = createAsyncThunk(
    "tours/cancelActiveSearch",
    async (_, { getState }) => {
        const { activeToken } = getState().tours;
        if (activeToken && typeof stopSearchPrices === "function") {
            try {
                await stopSearchPrices(activeToken);
            } catch {
                // —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ
            }
        }
        return true;
    }
);

/**
 * fetchTours(countryID)
 * - –ø–µ—Ä–µ–≤—ñ—Ä—è—î –∫–µ—à —Ç—É—Ä—ñ–≤ (toursCache) —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–µ—à–æ–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏    —â–æ —î
 * - –∫–µ—à—É—î hotels (hotelsCache) —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö getHotels –≤–∏–∫
 * - –∑–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ toursCache
 */
export const fetchTours = createAsyncThunk(
    "tours/fetchTours",
    async (countryID, { dispatch, getState, requestId, rejectWithValue }) => {
        const state = getState().tours;

        // üîπ 0) –Ø–∫—â–æ —î –∫–µ—à –¥–ª—è —Ü—ñ—î—ó –∫—Ä–∞—ó–Ω–∏ —ñ –≤—ñ–Ω –Ω–µ –ø—É—Å—Ç–∏–π ‚Äî –æ–¥—Ä–∞–∑—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ
        if (state.cache?.[countryID] && state.cache[countryID].length > 0) {
            return state.cache[countryID];
        }

        // üîπ 1) —è–∫—â–æ –¥–ª—è —Ü—ñ—î—ó –∫—Ä–∞—ó–Ω–∏ –≤–∂–µ —î emptyRetries —ñ –≤–æ–Ω–∏ 0 ‚Äî –±–ª–æ–∫—É—î–º–æ
        const map = state.emptyRetriesByCountry || {};
        const curRetries = map[countryID];
        if (typeof curRetries === "number") {
            if (curRetries <= 0) {
                return rejectWithValue("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }
            // —Å–ø–æ–∂–∏–≤–∞—î–º–æ 1 —Å–ø—Ä–æ–±—É (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "–ó–Ω–∞–π—Ç–∏")
            dispatch(decrementEmptyRetry(countryID));
        }

        // üîπ 2) –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ localStorage pre-wait
        const saved = localStorage.getItem(`waitUntil_${countryID}`);
        if (saved) {
            const ts = Number(saved);
            if (!Number.isNaN(ts) && ts > Date.now()) {
                await waitUntilWithAbortCheck(ts, { dispatch, getState, requestId });
            }
        }

        // üîπ 3) —Å—Ç–∞—Ä—Ç –ø–æ—à—É–∫—É
        let startResp;
        try {
            startResp = await startSearchPrices(countryID);
        } catch (e) {
            try {
                const parsed = await e.json();
                return rejectWithValue(parsed?.message || "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ä—Ç—É –ø–æ—à—É–∫—É");
            } catch {
                return rejectWithValue("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ä—Ç—É –ø–æ—à—É–∫—É");
            }
        }

        const { token, waitUntil } = await startResp.json();
        dispatch(setActiveToken(token));
        const startWaitTs = new Date(waitUntil).getTime();
        localStorage.setItem(`waitUntil_${countryID}`, startWaitTs);

        // üîπ 4) –æ—á—ñ–∫—É—î–º–æ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π —á–∞—Å
        await waitUntilWithAbortCheck(startWaitTs, { dispatch, getState, requestId });

        // üîπ 5) –ø—É–ª—ñ–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        let netAttemptsLeft = 2;
        while (true) {
            if (getState().tours.currentRequestId !== requestId) {
                throw new Error("ABORTED");
            }
            try {
                const resp = await getSearchPrices(token);
                const data = await resp.json();

                if (data?.prices) {
                    // –æ—Ç—Ä–∏–º—É—î–º–æ –≥–æ—Ç–µ–ª—ñ
                    let hotelsObj = {};
                    try {
                        const hResp = await getHotels(countryID);
                        hotelsObj = await hResp.json();
                    } catch {
                        hotelsObj = {};
                    }
                    const hotels = Object.values(hotelsObj || {});
                    const results = Object.values(data.prices).map((p) => {
                        const h = hotels.find((x) => String(x.id) === String(p.hotelID));
                        return {
                            id: p.id,
                            amount: p.amount,
                            currency: (p.currency || "").toUpperCase(),
                            startDate: p.startDate,
                            endDate: p.endDate,
                            hotelID: p.hotelID,
                            hotelName: h?.name || "–ù–µ–≤—ñ–¥–æ–º–∏–π –≥–æ—Ç–µ–ª—å",
                            img: h?.img || "",
                        };
                    });

                    // üîπ ‚ö†Ô∏è –ù–µ –∫–µ—à—É—î–º–æ –ø—É—Å—Ç—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
                    if (results.length > 0) {
                        return results;
                    } else {
                        return [];
                    }
                }

                if (data?.status === "IN_PROGRESS" && data?.waitUntil) {
                    const ts = new Date(data.waitUntil).getTime();
                    await waitUntilWithAbortCheck(ts, { dispatch, getState, requestId });
                    continue;
                }

                return [];
            } catch (err) {
                if (err instanceof Response) {
                    try {
                        const payload = await err.json();
                        if (payload?.code === 425 && payload?.waitUntil) {
                            const ts = new Date(payload.waitUntil).getTime();
                            await waitUntilWithAbortCheck(ts, { dispatch, getState, requestId });
                            continue;
                        }
                        return rejectWithValue(payload?.message || "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤");
                    } catch {}
                }

                if (netAttemptsLeft > 0) {
                    const left = netAttemptsLeft;
                    dispatch(
                        setInfo(`–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ. –ó–∞–ª–∏—à–∏–ª–æ—Å—å ${left} ${left === 1 ? "—Å–ø—Ä–æ–±–∞" : "—Å–ø—Ä–æ–±–∏"}.`)
                    );
                    netAttemptsLeft -= 1;
                    await sleep(2000);
                    continue;
                }
                return rejectWithValue("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –≤–∏—á–µ—Ä–ø–∞–Ω–∞. –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.");
            }
        }
    }
);

