// toursThunks.js

import { createAsyncThunk } from '@reduxjs/toolkit';
import {
  setActiveToken,
  setWaitUntil,
  clearWait,
  setInfo,
  decrementEmptyRetry,
  setHotelsCache,
} from './toursSlice';

const sleep = (ms) => new Promise((r) => setTimeout(r, ms));

const waitUntilWithAbortCheck = async (ts, { dispatch, getState, requestId }) => {
  const now = Date.now();
  if (ts <= now) return;
  dispatch(setWaitUntil(ts));
  while (Date.now() < ts) {
    if (getState().tours.currentRequestId !== requestId) {
      throw new Error('ABORTED');
    }
    await sleep(1000);
  }
  dispatch(clearWait());
};

export const cancelActiveSearch = createAsyncThunk(
  'tours/cancelActiveSearch',
  async (_, { getState }) => {
    const { activeToken } = getState().tours;
    if (activeToken && typeof stopSearchPrices === 'function') {
      try {
        await stopSearchPrices(activeToken);
      } catch {
        // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
      }
    }
    return true;
  }
);

export const fetchTours = createAsyncThunk(
  'tours/fetchTours',
  async (countryID, { dispatch, getState, requestId, rejectWithValue }) => {
    const state = getState().tours;

    // üîπ 0) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞ —Ç—É—Ä–æ–≤
    if (state.toursCache?.[countryID] && state.toursCache[countryID].length > 0) {
      return state.toursCache[countryID];
    }

    // üîπ 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø—É—Å—Ç—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    const map = state.emptyRetriesByCountry || {};
    const curRetries = map[countryID];
    if (typeof curRetries === 'number') {
      if (curRetries <= 0) {
        return rejectWithValue('–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      }
      dispatch(decrementEmptyRetry(countryID));
    }

    // üîπ 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ localStorage (–æ–∂–∏–¥–∞–Ω–∏–µ)
    const saved = localStorage.getItem(`waitUntil_${countryID}`);
    if (saved) {
      const ts = Number(saved);
      if (!Number.isNaN(ts) && ts > Date.now()) {
        await waitUntilWithAbortCheck(ts, { dispatch, getState, requestId });
      }
    }

    // üîπ 3) –°—Ç–∞—Ä—Ç –ø–æ–∏—Å–∫–∞
    let startResp;
    try {
      startResp = await startSearchPrices(countryID);
    } catch (e) {
      try {
        const parsed = await e.json();
        return rejectWithValue(parsed?.message || '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ä—Ç—É –ø–æ—à—É–∫—É');
      } catch {
        return rejectWithValue('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ä—Ç—É –ø–æ—à—É–∫—É');
      }
    }

    const { token, waitUntil } = await startResp.json();
    dispatch(setActiveToken(token));
    const startWaitTs = new Date(waitUntil).getTime();
    localStorage.setItem(`waitUntil_${countryID}`, startWaitTs);

    // üîπ 4) –ñ–¥–µ–º
    await waitUntilWithAbortCheck(startWaitTs, { dispatch, getState, requestId });

    // üîπ 5) –ü—É–ª–ª–∏–Ω–≥
    let netAttemptsLeft = 2;
    while (true) {
      if (getState().tours.currentRequestId !== requestId) {
        throw new Error('ABORTED');
      }
      try {
        const resp = await getSearchPrices(token);
        const data = await resp.json();

        if (data?.prices) {
          // üîπ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–µ–ª–µ–π
          let hotelsObj;
          if (state.hotelsCache?.[countryID]) {
            hotelsObj = state.hotelsCache[countryID];
          } else {
            try {
              const hResp = await getHotels(countryID);
              hotelsObj = await hResp.json();
              dispatch(setHotelsCache({ countryID, hotels: hotelsObj }));
            } catch {
              hotelsObj = {};
            }
          }

          const hotels = Object.values(hotelsObj || {});
          const results = Object.values(data.prices).map((p) => {
            const h = hotels.find((x) => String(x.id) === String(p.hotelID));
            return {
              id: p.id,
              amount: p.amount,
              currency: (p.currency || '').toUpperCase(),
              startDate: p.startDate,
              endDate: p.endDate,
              hotelID: p.hotelID,
              hotelName: h?.name || '–ù–µ–≤—ñ–¥–æ–º–∏–π –≥–æ—Ç–µ–ª—å',
              img: h?.img || '',
            };
          });

          if (results.length > 0) {
            return results;
          } else {
            return [];
          }
        }

        if (data?.status === 'IN_PROGRESS' && data?.waitUntil) {
          const ts = new Date(data.waitUntil).getTime();
          await waitUntilWithAbortCheck(ts, { dispatch, getState, requestId });
          continue;
        }

        return [];
      } catch (err) {
        if (err instanceof Response) {
          try {
            const payload = await err.json();
            if (payload?.code === 425 && payload?.waitUntil) {
              const ts = new Date(payload.waitUntil).getTime();
              await waitUntilWithAbortCheck(ts, { dispatch, getState, requestId });
              continue;
            }
            return rejectWithValue(payload?.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤');
          } catch {}
        }

        if (netAttemptsLeft > 0) {
          const left = netAttemptsLeft;
          dispatch(
            setInfo(`–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ. –ó–∞–ª–∏—à–∏–ª–æ—Å—å ${left} ${left === 1 ? '—Å–ø—Ä–æ–±–∞' : '—Å–ø—Ä–æ–±–∏'}.`)
          );
          netAttemptsLeft -= 1;
          await sleep(2000);
          continue;
        }
        return rejectWithValue('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –≤–∏—á–µ—Ä–ø–∞–Ω–∞. –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.');
      }
    }
  }
);
// –ò—Å—Ö–æ–¥—è –∏–∑ —Ñ–∞–π–ª–∞ api.js –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö,
// –Ω–∞–ø—Ä–∏–º–µ—Ä: window.db = new DB();

export const fetchToursByCity = createAsyncThunk(
  'tours/fetchToursByCity',
  async (cityID, { rejectWithValue }) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–µ–ª–∏ –∏–∑ –º–æ–∫–∞
      if (typeof window.db === 'undefined') {
        throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º');
      }
      const hotelsObj = window.db.getHotels();
      // –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–µ–ª–∏ –ø–æ ID –≥–æ—Ä–æ–¥–∞
      const tours = Object.values(hotelsObj).filter(
        (hotel) => Number(hotel.cityId) === Number(cityID)
      );
      return tours;
    } catch (e) {
      return rejectWithValue('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—É—Ä—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞.');
    }
  }
);

export const fetchHotelDetails = createAsyncThunk(
  'tours/fetchHotelDetails',
  async (hotelID, { rejectWithValue }) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–µ–ª–µ –∏–∑ –º–æ–∫–∞
      if (typeof window.db === 'undefined') {
        throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º');
      }
      const hotel = window.db.getHotel(Number(hotelID));
      return hotel;
    } catch (e) {
      return rejectWithValue('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–µ–ª–µ.');
    }
  }
);
